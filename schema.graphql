type Factory {
	# factory address
	id: ID!
	# amount of pools created
	poolCount: BigInt!
	# amoutn of transactions all time
	txCount: BigInt!
	# total number of swaps across all the pools
	numberOfSwaps: BigInt!
	# total volume all time in derived USD
	totalVolumeUSD: BigDecimal!
	# total volume all time in derived ETH
	totalVolumeETH: BigDecimal!
	# total swap fees all time in USD
	totalFeesUSD: BigDecimal!
	# total swap fees all time in USD
	totalFeesETH: BigDecimal!
	# all volume even through less reliable USD values
	untrackedVolumeUSD: BigDecimal!
	# TVL derived in USD
	totalValueLockedUSD: BigDecimal!
	# TVL derived in ETH
	totalValueLockedETH: BigDecimal!
	# TVL derived in USD untracked
	totalValueLockedUSDUntracked: BigDecimal!
	# TVL derived in ETH untracked
	totalValueLockedETHUntracked: BigDecimal!

	# current owner of the factory
	owner: ID!
}

# stores for USD calculations
type Bundle {
	id: ID!
	# price of ETH in usd
	ethPriceUSD: BigDecimal!
}

type Token {
	# token address
	id: ID!
	# token symbol
	symbol: String!
	# token name
	name: String!
	# token decimals
	decimals: BigInt! @config(precision: 78) @index
	# is token whitelisted?
	isWhitelisted: Boolean!
	# volume in token units
	volume: BigDecimal!
	# volume in derived USD
	volumeUSD: BigDecimal!
	# volume in USD even on pools with less reliable USD values
	untrackedVolumeUSD: BigDecimal!
	# fees in USD
	feesUSD: BigDecimal!
	# transactions across all pools that include this token
	txCount: BigInt!
	# number of pools containing this token
	poolCount: BigInt! @index
	# liquidity across all pools in token units
	totalValueLocked: BigDecimal!
	# liquidity across all pools in derived USD
	totalValueLockedUSD: BigDecimal!
	# TVL derived in USD untracked
	totalValueLockedUSDUntracked: BigDecimal!
	# Note: for chains where ETH is not the native token, this will be the derived
	# price of that chain's native token, effectively, this should be renamed
	# derivedNative
	derivedETH: BigDecimal!
	# pools token is in that are white listed for USD pricing
	whitelistPools: [String!]! # Pool ids
}

type Pool {
	# pool address
	id: ID!
	# creation
	createdAtTimestamp: BigInt!
	# block pool was created at
	createdAtBlockNumber: BigInt!
	# token0
	token0: Token! @index
	# token1
	token1: Token! @index
	# fee amount
	feeTier: BigInt!
	# in range liquidity
	liquidity: BigInt!
	# current price tracker
	sqrtPrice: BigInt!
	# token0 per token1
	token0Price: BigDecimal!
	# token1 per token0
	token1Price: BigDecimal!
	# current tick
	tick: BigInt
	# current observation index
	observationIndex: BigInt!
	# all time token0 swapped
	volumeToken0: BigDecimal!
	# all time token1 swapped
	volumeToken1: BigDecimal!
	# all time USD swapped
	volumeUSD: BigDecimal!
	# all time USD swapped, unfiltered for unreliable USD pools
	untrackedVolumeUSD: BigDecimal!
	# fees in USD
	feesUSD: BigDecimal!
	# all time number of transactions
	txCount: BigInt!
	# all time fees collected token0
	collectedFeesToken0: BigDecimal!
	# all time fees collected token1
	collectedFeesToken1: BigDecimal!
	# all time fees collected derived USD
	collectedFeesUSD: BigDecimal!
	# total token 0 across all ticks
	totalValueLockedToken0: BigDecimal!
	# total token 1 across all ticks
	totalValueLockedToken1: BigDecimal!
	# tvl derived ETH
	totalValueLockedETH: BigDecimal!
	# tvl USD
	totalValueLockedUSD: BigDecimal!
	# TVL derived in USD untracked
	totalValueLockedUSDUntracked: BigDecimal!
	# Fields used to help derived relationship
	liquidityProviderCount: BigInt! # used to detect new exchanges
	# hourly snapshots of pool data
	poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
	# daily snapshots of pool data
	poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
}

type Tick {
	# format: <pool address>#<tick index>
	id: ID!
	# pool address
	poolAddress: String @index
	# tick index
	tickIdx: BigInt!
	# pointer to pool
	pool: Pool! @index
	# total liquidity pool has as tick lower or upper
	liquidityGross: BigInt!
	# how much liquidity changes when tick crossed
	liquidityNet: BigInt!
	# calculated price of token0 of tick within this pool - constant
	price0: BigDecimal!
	# calculated price of token1 of tick within this pool - constant
	price1: BigDecimal!
	# created time
	createdAtTimestamp: BigInt!
	# created block
	createdAtBlockNumber: BigInt! @index
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData {
	# timestamp rounded to current day by dividing by 86400
	id: ID!
	# timestamp rounded to current day by dividing by 86400
	date: Int! @index
	# pointer to pool
	pool: Pool! @index
	# in range liquidity at end of period
	liquidity: BigInt!
	# current price tracker at end of period
	sqrtPrice: BigInt!
	# price of token0 - derived from sqrtPrice
	token0Price: BigDecimal!
	# price of token1 - derived from sqrtPrice
	token1Price: BigDecimal!
	# current tick at end of period
	tick: BigInt
	# tvl derived in USD at end of period
	tvlUSD: BigDecimal!
	# volume in token0
	volumeToken0: BigDecimal!
	# volume in token1
	volumeToken1: BigDecimal!
	# volume in USD
	volumeUSD: BigDecimal!
	# fees in USD
	feesUSD: BigDecimal!
	# numebr of transactions during period
	txCount: BigInt!
	# opening price of token0
	openingPrice: BigDecimal!
	# high price of token0
	high: BigDecimal!
	# low price of token0
	low: BigDecimal!
	# close price of token0
	close: BigDecimal!
}

# hourly stats tracker for pool
type PoolHourData {
	# format: <pool address>-<timestamp>
	id: ID!
	# unix timestamp for start of hour
	periodStartUnix: Int!
	# pointer to pool
	pool: Pool! @index
	# in range liquidity at end of period
	liquidity: BigInt!
	# current price tracker at end of period
	sqrtPrice: BigInt!
	# price of token0 - derived from sqrtPrice
	token0Price: BigDecimal!
	# price of token1 - derived from sqrtPrice
	token1Price: BigDecimal!
	# current tick at end of period
	tick: BigInt
	# tvl derived in USD at end of period
	tvlUSD: BigDecimal!
	# volume in token0
	volumeToken0: BigDecimal!
	# volume in token1
	volumeToken1: BigDecimal!
	# volume in USD
	volumeUSD: BigDecimal!
	# fees in USD
	feesUSD: BigDecimal!
	# numebr of transactions during period
	txCount: BigInt!
	# opening price of token0
	openingPrice: BigDecimal!
	# high price of token0
	high: BigDecimal!
	# low price of token0
	low: BigDecimal!
	# close price of token0
	close: BigDecimal!
}
